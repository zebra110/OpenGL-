
原则上，显示中文和显示英文一样，同样是把要显示的字符做成显示列表，然后进行调用。
但是有一个问题，英文字母很少，为每个字母创建一个显示列表，没有问题。但是汉字有非常多个，如果每个汉字都产生一个显示列表，这是不切实际的。

我们不能在初始化时就为每个字符建立一个显示列表，那就只有在每次绘制字符时创建它了。
当我们需要绘制一个字符时，创建对应的显示列表，等绘制完毕后，再将它销毁。
通常我们在C语言里面使用的字符串，英文字符只占用一个字节，而中文字符则占用两个字节。
用 MultiByteToWideChar函数，可以转化为所有的字符都占两个字节。


void drawCNString(const char* str) {
    int len, i;   
    //char是8位字符类型，最多只能包含256种字符，许多外文字符集所含的字符数目超过256个，char型无法表示。
    //wchar_t数据类型一般为16位或32位，但不同的C或C++库有不同的规定，如GNU Libc规定wchar_t为32位，总之，wchar_t所能表示的字符数远超char型。
    //标准C++中的wprintf()函数以及iostream类库中的类和对象能提供wchar_t宽字符类型的相关操作。
    wchar_t* wstring;
    //HDC设备上下文是一种包含有关某个设备（如显示器或打印机）的绘制属性信息的 Windows 数据结构。
    //所有绘制调用都通过设备上下文对象进行，这些对象封装了用于绘制线条、形状和文本的 Windows API。
    HDC hDC = wglGetCurrentDC();
    //GLuint表示正整形
    GLuint list = glGenLists(1);

    // 计算字符的个数
    // 如果是双字节字符的（比如中文字符），两个字节才算一个字符
    // 否则一个字节算一个字符
    //IsDBCSLeadByte函数用于用于判断一个字符是不是多字节字符，如果是返回一个非零数，如果不是返回零
    len = 0;
    for(i=0; str[i]!='\0'; ++i)
    {
        if( IsDBCSLeadByte(str[i]) )
            ++i;
        ++len;
    }

    // 将混合字符转化为宽字符
    wstring = (wchar_t*)malloc((len+1) * sizeof(wchar_t));
    MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, str, -1, wstring, len);
    wstring[len] = L'\0';

    // 逐个输出字符
    for(i=0; i<len; ++i)
    {
        wglUseFontBitmapsW(hDC, wstring[i], 1, list);
        glCallList(list);
    }

    // 回收所有临时资源
    free(wstring);
    glDeleteLists(list, 1);
}